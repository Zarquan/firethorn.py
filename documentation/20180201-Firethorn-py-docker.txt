#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2017, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


# -----------------------------------------------------
# Add our secret function.
#[user@virtual]


secrethost='stv@shepseskaf.roe.ac.uk'
secretfile='${HOME:?}/secret.store.blue.5Feb2018'

secret()
{
    local key=${1:?}
    ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/^${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
}

secret 'ping'



# -----------------------------------------------------
# Set build tags & branch
#[user@virtual]

export buildtag=2.1.13
branch=2.1.13



# -----------------------------------------------------
# Create our properties.
#[user@virtual]


cat > "${HOME:?}/chain.properties" << EOF

metadata=postgres
metauser=$(pwgen 20 1)
metapass=$(pwgen 20 1)

userhost=$(secret 'firethorn.user.host')
userdata=$(secret 'firethorn.user.data')
useruser=$(secret 'firethorn.user.user')
userpass=$(secret 'firethorn.user.pass')

datahost=$(secret 'firethorn.data.host')
datadata=$(secret 'firethorn.data.data')
datauser=$(secret 'firethorn.data.user')
datapass=$(secret 'firethorn.data.pass')

tunneluser=$(secret 'ssh.tunnel.user')
tunnelhost=$(secret 'ssh.tunnel.host')

admingroup=wombles
adminuser=orinoco
adminpass=wombleden

guestgroup=friends

EOF

# -----------------------------------------------------
# Create our Firethorn properties.
#[user@virtual]

source "${HOME:?}/chain.properties"
cat > "${HOME:?}/firethorn.properties" << EOF

firethorn.meta.type=pgsql
firethorn.meta.driver=org.postgresql.Driver
firethorn.meta.host=bethany
firethorn.meta.url=jdbc:postgresql://bethany/${metadata}
firethorn.meta.data=postgres

firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}

firethorn.user.type=mssql
firethorn.user.url=jdbc:jtds:sqlserver://patricia/${userdata}
firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver

firethorn.user.host=patricia
firethorn.user.data=${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}

firethorn.admin.community=${admingroup:?}
firethorn.admin.user.name=${adminuser:?}
firethorn.admin.user.pass=${adminpass:?}

firethorn.guest.community=${guestgroup:?}

EOF

chmod a+r "${HOME:?}/firethorn.properties"
chcon -t svirt_sandbox_file_t "${HOME:?}/firethorn.properties"


# -----------------------------------------------------
# Create our compose env file.
#[user@virtual]

source "${HOME:?}/chain.properties"
cat > "${HOME:?}/.env" << EOF

buildtag=${branch:?}

metadata=postgres
metauser=${metauser:?}
metapass=${metapass:?}

userhost=${userhost:?}
datauser=${datauser:?}
datapass=${datapass:?}
datahost=${datahost:?}

tunneluser=${tunneluser:?}
tunnelhost=${tunnelhost:?}

EOF



source ${HOME:?}/chain.properties

# -----------------------------------------------------
# Clone the firethorn.py project
#[user@virtual]

git clone https://github.com/stvoutsin/firethorn.py.git



# -----------------------------------------------------
# Build our python client image
#[user@virtual]

cd firethorn.py/docker
docker build --tag "firethorn-py" firethorn-py



# -----------------------------------------------------
# Run our python client container
#[user@virtual]

cd ${HOME}/
cp firethorn.py/docker/firethorn-py.yml ${HOME}/firethorn-py.yml

docker-compose --file "firethorn-py.yml" run firethorn-py


# -----------------------------------------------------
# Run python3
#[user@virtual]
python3
..


 
import firethorn
from firethorn.models.workspace import Workspace
ft = firethorn.Firethorn()
ft.login("orinoco", "wombleden", "wombles")


# System info check
print (ft.firethorn_engine.system_info_check())
#  Create a JdbcResource to represent the local JDBC database.
jdbc_name="ATLAS JDBC resource"
jdbc_url="jdbc:jtds:sqlserver://" + firethorn.config.datahost + "/ATLASDR1"
atlas_jdbc_url = ft.firethorn_engine.create_jdbc_space("ATLAS" , firethorn.config.dataurl, "ATLASDR1", jdbc_name, firethorn.config.datauser, firethorn.config.datapass)
print (atlas_jdbc_url)


# Create an empty AdqlResource to represent the local JDBC database.
adqlname="ATLAS ADQL resource"
atlas_adql_url = ft.firethorn_engine.create_adql_space(adqlname)
print (atlas_adql_url)


# Locate the JdbcSchema based on catalog and schema name. 
catalog="ATLASDR1"
schema="dbo"
atlas_jdbc_schema = ft.firethorn_engine.jdbc_select_by_name(atlas_jdbc_url, catalog, schema)
print (atlas_jdbc_schema)


# Import the mapping between JDBC and ADQL tables.
metadoc="https://raw.githubusercontent.com/stvoutsin/firethorn.py/master/firethorn/meta/ATLASDR1_TablesSchema.xml"
atlas_adql_schema = ft.firethorn_engine.import_jdbc_metadoc(atlas_adql_url, atlas_jdbc_schema, metadoc)
print (atlas_adql_schema)


# Create an IvoaResource to represent the GAIA TAP resource.
tapname="GAIA TAP service"
tapurl="http://gea.esac.esa.int/tap-server/tap"
gaia_ivoa_resource = ft.firethorn_engine.create_ivoa_space(tapname, tapurl)
print (gaia_ivoa_resource)


# Import the VOSI Metadata
vosifile="https://raw.githubusercontent.com/stvoutsin/firethorn.py/master/firethorn/meta/vosi/gaia/gaia-tableset.xml"
gaia_schema = ft.firethorn_engine.import_vosi(vosifile, gaia_ivoa_resource)
print (gaia_schema)


# Create a new ADQL resource to act as a workspace.
adqlname="Query workspace"
queryspace = ft.firethorn_engine.create_adql_space(adqlname)
print(queryspace)


# Find the AtlasDR1 schema by name.
selector="ATLASDR1"
atlas_schema = ft.firethorn_engine.select_by_name(selector, atlas_adql_url)
print (atlas_schema)


# Find the Gaia DR1 schema by name.
selector="gaiadr1"
gaia_schema = ft.firethorn_engine.select_ivoa_schema(selector, gaia_ivoa_resource)
print (gaia_schema)


# Add the Atlas DR1 schema.
name="ATLASDR1"
ft.firethorn_engine.import_schema(name, atlas_schema, queryspace)


# Add the Gaia DR1 schema.
name="GAIADR1"
base=gaia_schema
ft.firethorn_engine.import_schema(name, base, queryspace)


# List the workspace schema.
print (ft.firethorn_engine.list_schemas(queryspace))


# Create a new Workspace
myworkspace = Workspace(ident=queryspace, firethorn_engine=ft.firethorn_engine)


# Start an asynchronous query
myquery = myworkspace.query_async("SELECT top 1 filterID FROM ATLASDR1.Filter")
myquery.run()
while myquery.status()=="RUNNING" or myquery.status()=="READY":
    print (myquery.status())
    time.sleep(5)


# Get results as astropy
print (myquery.results().as_astropy())


# Create another workspace
wspace = ft.new_workspace("ATLAS")
wspace.import_schema(myworkspace.get_schema("ATLASDR1"))
print (wspace.get_tables("ATLASDR1"))


# Run a synchronous query
qry = wspace.query("Select top 3 * from ATLASDR1.Filter")
print (qry.results().as_astropy())


