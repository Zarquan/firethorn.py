#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2017, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


# -----------------------------------------------------
# Add our secret function.
#[user@virtual]


secrethost='stv@shepseskaf.roe.ac.uk'
secretfile='${HOME:?}/secret.store.blue.5Feb2018'

secret()
{
    local key=${1:?}
    ssh -o 'VisualHostKey=no' "${secrethost:?}" "sed -n 's/^${key}=\\(.*\\)/\\1/p' \"${secretfile:?}\"" 
}

secret 'ping'



# -----------------------------------------------------
# Set build tags & branch
#[user@virtual]

export buildtag=2.1.14
branch=2.1.14



# ----------------------------------------------------
# Create our properties.
#[user@virtual]


cat > "${HOME:?}/chain.properties" << EOF

metadata=postgres
metauser=$(pwgen 20 1)
metapass=$(pwgen 20 1)

userhost=$(secret 'firethorn.user.host')
userdata=$(secret 'firethorn.user.data')
useruser=$(secret 'firethorn.user.user')
userpass=$(secret 'firethorn.user.pass')

datahost=$(secret 'firethorn.data.host')
datadata=$(secret 'firethorn.data.data')
datacatalog=$(secret 'firethorn.data.data')
datatype=mssql
datauser=$(secret 'firethorn.data.user')
datapass=$(secret 'firethorn.data.pass')

tunneluser=$(secret 'ssh.tunnel.user')
tunnelhost=$(secret 'ssh.tunnel.host')

admingroup=wombles
adminuser=orinoco
adminpass=wombleden

guestgroup=friends
osa_endpoint=http://gillian:8080/firethorn/adql/resource/76

EOF

# -----------------------------------------------------
# Create our Firethorn properties.
#[user@virtual]

source "${HOME:?}/chain.properties"
cat > "${HOME:?}/firethorn.properties" << EOF

firethorn.meta.type=pgsql
firethorn.meta.driver=org.postgresql.Driver
firethorn.meta.host=bethany
firethorn.meta.url=jdbc:postgresql://bethany/${metadata}
firethorn.meta.data=postgres

firethorn.meta.user=${metauser:?}
firethorn.meta.pass=${metapass:?}

firethorn.user.type=mssql
firethorn.user.url=jdbc:jtds:sqlserver://${userhost:?}/${userdata:?}
firethorn.user.driver=net.sourceforge.jtds.jdbc.Driver

firethorn.user.host=${userhost:?}
firethorn.user.data=${userdata:?}
firethorn.user.user=${useruser:?}
firethorn.user.pass=${userpass:?}

firethorn.admin.community=${admingroup:?}
firethorn.admin.user.name=${adminuser:?}
firethorn.admin.user.pass=${adminpass:?}

firethorn.guest.community=${guestgroup:?}

EOF

chmod a+r "${HOME:?}/firethorn.properties"
chcon -t svirt_sandbox_file_t "${HOME:?}/firethorn.properties"


# -----------------------------------------------------
# Create our compose env file.
#[user@virtual]

ln -s "${HOME:?}/chain.properties" "${HOME:?}/.env"

source ${HOME:?}/chain.properties

# -----------------------------------------------------
# Clone the firethorn.py project
#[user@virtual]

pushd "${HOME:?}"

    git clone https://github.com/stvoutsin/firethorn.py.git

popd


# -----------------------------------------------------
# Build our python client image
#[user@virtual]

pushd  "${HOME:?}/firethorn.py/docker"

   docker build --tag "firethorn-py" firethorn-py

popd

# -----------------------------------------------------
# Run our python client container
#[user@virtual]

pushd  "${HOME}/"
    cp firethorn.py/docker/firethorn-py.yml ${HOME}/firethorn-py.yml
    docker-compose --file "firethorn-py.yml" run firethorn-py



# -----------------------------------------------------
# Run python3
#[user@virtual]
python3
..
import firethorn
import time

ft = firethorn.Firethorn(endpoint=firethorn.config.default_endpoint)
ft.login("orinoco", "wombleden", "wombles")


#  Create a JdbcResource to represent the local JDBC database.
jdbc_name="ATLAS JDBC resource"
atlas_jdbc = ft.firethorn_engine.create_jdbc_resource(jdbc_name ,firethorn.config.datadata, firethorn.config.datacatalog, firethorn.config.datatype, firethorn.config.datahost, firethorn.config.datauser, firethorn.config.datapass)

# Locate the JdbcSchema based on catalog and schema name. 
catalog="ATLASDR1"
schema="dbo"

# Jdbc Schema Tests
atlas_jdbc_schema = ft.firethorn_engine.select_jdbc_schema_by_name(atlas_jdbc.url, catalog, schema)

# Create an empty AdqlResource to represent the local JDBC database.
adqlname="ATLAS ADQL resource"
atlas_adql = ft.firethorn_engine.create_adql_resource(adqlname)

# Import the mapping between JDBC and ADQL tables.
metadoc="https://raw.githubusercontent.com/stvoutsin/firethorn.py/master/firethorn/meta/ATLASDR1_TablesSchema.xml"
atlas_adql_schema = atlas_adql.import_jdbc_schema(atlas_jdbc_schema, metadoc=metadoc)


# Create an empty AdqlResource to represent a Query Resource
adqlname="Query resource"
query_resource = ft.firethorn_engine.create_adql_resource(adqlname)
query_resource.import_adql_schema(atlas_adql_schema)

osa = ft.get_workspace("OSA")
wspace = ft.new_workspace("ATLAS")
wspace.import_schema(osa.get_schema("ATLASDR1"))

# List the workspace schema.
print (wspace.get_schemas())


querytext = "SELECT * FROM ATLASDR1.Filter"

admin_query = query_resource.create_query(querytext) 
admin_query.update(adql_query_status_next="COMPLETED")

print ("Creating query using AdqlQuery.. ")
print ("List of Running queries: ")
print ( query_resource.select_queries())

while admin_query.status()=="RUNNING" or admin_query.status()=="READY":
    print (admin_query.status())
    time.sleep(5)
    

print ("Running query using Query (SYNC) class.. ")
qry = wspace.query("Select top 2 * from ATLASDR1.Filter")
print (qry.results().as_astropy())


print ("Running query using Query (ASYNC) class.. ")
myquery = wspace.query_async(querytext)
myquery.run()
while myquery.status()=="RUNNING" or myquery.status()=="READY":
    print (myquery.status())
    time.sleep(5)

print (myquery.results().as_astropy())

